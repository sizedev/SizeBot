# pyright: reportUnnecessaryIsInstance=false
# ruff: noqa: UP018
from typing import Any
import pytest
from contextlib import AbstractContextManager, nullcontext as does_not_raise

from sizebot.lib import units
from sizebot.lib.digidecimal import BaseDecimal
from sizebot.lib.units import Decimal, SV, WV, TV, AV, VV, RV

type UnitType = Decimal | SV | WV | TV | AV | VV | RV

units.init()


def idfn(arg: Any) -> Any:
    if isinstance(arg, BaseDecimal):
        return repr(arg)
    return arg


def expect_raise(expected: Any | type[BaseException]) -> AbstractContextManager[Any]:
    if isinstance(expected, type) and issubclass(expected, BaseException):
        return pytest.raises(expected)
    return does_not_raise()

# a + b = ?
@pytest.mark.parametrize(
    ("a", "b", "expected"),
    [
        (int(4),        int(2),         int(6)),
        (int(4),        Decimal(2),     Decimal(6)),
        (int(4),        SV(2),          NotImplementedError),
        (int(4),        WV(2),          NotImplementedError),
        (int(4),        TV(2),          NotImplementedError),
        (int(4),        AV(2),          NotImplementedError),
        (int(4),        VV(2),          NotImplementedError),
        (int(4),        RV(2),          NotImplementedError),
        (Decimal(4),    int(2),         Decimal(6)),
        (Decimal(4),    Decimal(2),     Decimal(6)),
        (Decimal(4),    SV(2),          NotImplementedError),
        (Decimal(4),    WV(2),          NotImplementedError),
        (Decimal(4),    TV(2),          NotImplementedError),
        (Decimal(4),    AV(2),          NotImplementedError),
        (Decimal(4),    VV(2),          NotImplementedError),
        (Decimal(4),    RV(2),          NotImplementedError),
        (SV(4),         int(2),         NotImplementedError),
        (SV(4),         Decimal(2),     NotImplementedError),
        (SV(4),         SV(2),          SV(6)),
        (SV(4),         WV(2),          NotImplementedError),
        (SV(4),         TV(2),          NotImplementedError),
        (SV(4),         AV(2),          NotImplementedError),
        (SV(4),         VV(2),          NotImplementedError),
        (SV(4),         RV(2),          NotImplementedError),
        (WV(4),         int(2),         NotImplementedError),
        (WV(4),         Decimal(2),     NotImplementedError),
        (WV(4),         SV(2),          NotImplementedError),
        (WV(4),         WV(2),          WV(6)),
        (WV(4),         TV(2),          NotImplementedError),
        (WV(4),         AV(2),          NotImplementedError),
        (WV(4),         VV(2),          NotImplementedError),
        (WV(4),         RV(2),          NotImplementedError),
        (TV(4),         int(2),         NotImplementedError),
        (TV(4),         Decimal(2),     NotImplementedError),
        (TV(4),         SV(2),          NotImplementedError),
        (TV(4),         WV(2),          NotImplementedError),
        (TV(4),         TV(2),          TV(6)),
        (TV(4),         AV(2),          NotImplementedError),
        (TV(4),         VV(2),          NotImplementedError),
        (TV(4),         RV(2),          NotImplementedError),
        (AV(4),         int(2),         NotImplementedError),
        (AV(4),         Decimal(2),     NotImplementedError),
        (AV(4),         SV(2),          NotImplementedError),
        (AV(4),         WV(2),          NotImplementedError),
        (AV(4),         TV(2),          NotImplementedError),
        (AV(4),         AV(2),          AV(6)),
        (AV(4),         VV(2),          NotImplementedError),
        (AV(4),         RV(2),          NotImplementedError),
        (VV(4),         int(2),         NotImplementedError),
        (VV(4),         Decimal(2),     NotImplementedError),
        (VV(4),         SV(2),          NotImplementedError),
        (VV(4),         WV(2),          NotImplementedError),
        (VV(4),         TV(2),          NotImplementedError),
        (VV(4),         AV(2),          NotImplementedError),
        (VV(4),         VV(2),          VV(6)),
        (VV(4),         RV(2),          NotImplementedError),
        (RV(4),         int(2),         NotImplementedError),
        (RV(4),         Decimal(2),     NotImplementedError),
        (RV(4),         SV(2),          NotImplementedError),
        (RV(4),         WV(2),          NotImplementedError),
        (RV(4),         TV(2),          NotImplementedError),
        (RV(4),         AV(2),          NotImplementedError),
        (RV(4),         VV(2),          NotImplementedError),
        (RV(4),         RV(2),          RV(6)),
    ],
    ids=idfn
)
def test_add(a: Any, b: Any, expected: UnitType | type[NotImplementedError]) -> None:
    with expect_raise(expected):
        result = a + b
        assert type(result) is type(expected)
        assert result == expected
        if not isinstance(b, int):
            r_result = b.__radd__(a)
            assert type(r_result) is type(expected)
            assert r_result == expected

# a - b = ?
@pytest.mark.parametrize(
    ("a", "b", "expected"),
    [
        (int(4),        int(2),         int(2)),
        (int(4),        Decimal(2),     Decimal(2)),
        (int(4),        SV(2),          NotImplementedError),
        (int(4),        WV(2),          NotImplementedError),
        (int(4),        TV(2),          NotImplementedError),
        (int(4),        AV(2),          NotImplementedError),
        (int(4),        VV(2),          NotImplementedError),
        (int(4),        RV(2),          NotImplementedError),
        (Decimal(4),    int(2),         Decimal(2)),
        (Decimal(4),    Decimal(2),     Decimal(2)),
        (Decimal(4),    SV(2),          NotImplementedError),
        (Decimal(4),    WV(2),          NotImplementedError),
        (Decimal(4),    TV(2),          NotImplementedError),
        (Decimal(4),    AV(2),          NotImplementedError),
        (Decimal(4),    VV(2),          NotImplementedError),
        (Decimal(4),    RV(2),          NotImplementedError),
        (SV(4),         int(2),         NotImplementedError),
        (SV(4),         Decimal(2),     NotImplementedError),
        (SV(4),         SV(2),          SV(2)),
        (SV(4),         WV(2),          NotImplementedError),
        (SV(4),         TV(2),          NotImplementedError),
        (SV(4),         AV(2),          NotImplementedError),
        (SV(4),         VV(2),          NotImplementedError),
        (SV(4),         RV(2),          NotImplementedError),
        (WV(4),         int(2),         NotImplementedError),
        (WV(4),         Decimal(2),     NotImplementedError),
        (WV(4),         SV(2),          NotImplementedError),
        (WV(4),         WV(2),          WV(2)),
        (WV(4),         TV(2),          NotImplementedError),
        (WV(4),         AV(2),          NotImplementedError),
        (WV(4),         VV(2),          NotImplementedError),
        (WV(4),         RV(2),          NotImplementedError),
        (TV(4),         int(2),         NotImplementedError),
        (TV(4),         Decimal(2),     NotImplementedError),
        (TV(4),         SV(2),          NotImplementedError),
        (TV(4),         WV(2),          NotImplementedError),
        (TV(4),         TV(2),          TV(2)),
        (TV(4),         AV(2),          NotImplementedError),
        (TV(4),         VV(2),          NotImplementedError),
        (TV(4),         RV(2),          NotImplementedError),
        (AV(4),         int(2),         NotImplementedError),
        (AV(4),         Decimal(2),     NotImplementedError),
        (AV(4),         SV(2),          NotImplementedError),
        (AV(4),         WV(2),          NotImplementedError),
        (AV(4),         TV(2),          NotImplementedError),
        (AV(4),         AV(2),          AV(2)),
        (AV(4),         VV(2),          NotImplementedError),
        (AV(4),         RV(2),          NotImplementedError),
        (VV(4),         int(2),         NotImplementedError),
        (VV(4),         Decimal(2),     NotImplementedError),
        (VV(4),         SV(2),          NotImplementedError),
        (VV(4),         WV(2),          NotImplementedError),
        (VV(4),         TV(2),          NotImplementedError),
        (VV(4),         AV(2),          NotImplementedError),
        (VV(4),         VV(2),          VV(2)),
        (VV(4),         RV(2),          NotImplementedError),
        (RV(4),         int(2),         NotImplementedError),
        (RV(4),         Decimal(2),     NotImplementedError),
        (RV(4),         SV(2),          NotImplementedError),
        (RV(4),         WV(2),          NotImplementedError),
        (RV(4),         TV(2),          NotImplementedError),
        (RV(4),         AV(2),          NotImplementedError),
        (RV(4),         VV(2),          NotImplementedError),
        (RV(4),         RV(2),          RV(2)),
    ],
    ids=idfn
)
def test_sub(a: Any, b: Any, expected: UnitType | type[NotImplementedError]) -> None:
    with expect_raise(expected):
        result = a - b
        assert type(result) is type(expected)
        assert result == expected

# a * b = ?
@pytest.mark.parametrize(
    ("a","b","expected"),
    [
        (int(4),        int(2),         int(8)),
        (int(4),        Decimal(2),     Decimal(8)),
        (int(4),        SV(2),          SV(8)),
        (int(4),        WV(2),          WV(8)),
        (int(4),        TV(2),          TV(8)),
        (int(4),        AV(2),          AV(8)),
        (int(4),        VV(2),          VV(8)),
        (int(4),        RV(2),          RV(8)),
        (Decimal(4),    int(2),         Decimal(8)),
        (Decimal(4),    Decimal(2),     Decimal(8)),
        (Decimal(4),    SV(2),          SV(8)),
        (Decimal(4),    WV(2),          WV(8)),
        (Decimal(4),    TV(2),          TV(8)),
        (Decimal(4),    AV(2),          AV(8)),
        (Decimal(4),    VV(2),          VV(8)),
        (Decimal(4),    RV(2),          RV(8)),
        (SV(4),         int(2),         SV(8)),
        (SV(4),         Decimal(2),     SV(8)),
        (SV(4),         SV(2),          AV(8)),
        (SV(4),         WV(2),          NotImplementedError),
        (SV(4),         TV(2),          NotImplementedError),
        (SV(4),         AV(2),          VV(8)),
        (SV(4),         VV(2),          NotImplementedError),
        (SV(4),         RV(2),          NotImplementedError),
        (WV(4),         int(2),         WV(8)),
        (WV(4),         Decimal(2),     WV(8)),
        (WV(4),         SV(2),          NotImplementedError),
        (WV(4),         WV(2),          NotImplementedError),
        (WV(4),         TV(2),          NotImplementedError),
        (WV(4),         AV(2),          NotImplementedError),
        (WV(4),         VV(2),          NotImplementedError),
        (WV(4),         RV(2),          NotImplementedError),
        (TV(4),         int(2),         TV(8)),
        (TV(4),         Decimal(2),     TV(8)),
        (TV(4),         SV(2),          NotImplementedError),
        (TV(4),         WV(2),          NotImplementedError),
        (TV(4),         TV(2),          NotImplementedError),
        (TV(4),         AV(2),          NotImplementedError),
        (TV(4),         VV(2),          NotImplementedError),
        (TV(4),         RV(2),          SV(8)),
        (AV(4),         int(2),         AV(8)),
        (AV(4),         Decimal(2),     AV(8)),
        (AV(4),         SV(2),          VV(8)),
        (AV(4),         WV(2),          NotImplementedError),
        (AV(4),         TV(2),          NotImplementedError),
        (AV(4),         AV(2),          NotImplementedError),
        (AV(4),         VV(2),          NotImplementedError),
        (AV(4),         RV(2),          NotImplementedError),
        (VV(4),         int(2),         VV(8)),
        (VV(4),         Decimal(2),     VV(8)),
        (VV(4),         SV(2),          NotImplementedError),
        (VV(4),         WV(2),          NotImplementedError),
        (VV(4),         TV(2),          NotImplementedError),
        (VV(4),         AV(2),          NotImplementedError),
        (VV(4),         VV(2),          NotImplementedError),
        (VV(4),         RV(2),          NotImplementedError),
        (RV(4),         int(2),         RV(8)),
        (RV(4),         Decimal(2),     RV(8)),
        (RV(4),         SV(2),          NotImplementedError),
        (RV(4),         WV(2),          NotImplementedError),
        (RV(4),         TV(2),          SV(8)),
        (RV(4),         AV(2),          NotImplementedError),
        (RV(4),         VV(2),          NotImplementedError),
        (RV(4),         RV(2),          NotImplementedError),
    ],
    ids=idfn
)
def test_mul(a: Any, b: Any, expected: UnitType | type[NotImplementedError]) -> None:
    with expect_raise(expected):
        result = a * b
        assert type(result) is type(expected)
        assert result == expected

# a / b = ?
@pytest.mark.parametrize(
    ("a", "b", "expected"),
    [
        (int(4),        int(2),         float(2)),
        (int(4),        Decimal(2),     Decimal(2)),
        (int(4),        SV(2),          NotImplementedError),
        (int(4),        WV(2),          NotImplementedError),
        (int(4),        TV(2),          NotImplementedError),
        (int(4),        AV(2),          NotImplementedError),
        (int(4),        VV(2),          NotImplementedError),
        (int(4),        RV(2),          NotImplementedError),
        (Decimal(4),    int(2),         Decimal(2)),
        (Decimal(4),    Decimal(2),     Decimal(2)),
        (Decimal(4),    SV(2),          NotImplementedError),
        (Decimal(4),    WV(2),          NotImplementedError),
        (Decimal(4),    TV(2),          NotImplementedError),
        (Decimal(4),    AV(2),          NotImplementedError),
        (Decimal(4),    VV(2),          NotImplementedError),
        (Decimal(4),    RV(2),          NotImplementedError),
        (SV(4),         int(2),         SV(2)),
        (SV(4),         Decimal(2),     SV(2)),
        (SV(4),         SV(2),          Decimal(2)),
        (SV(4),         WV(2),          NotImplementedError),
        (SV(4),         TV(2),          RV(2)),
        (SV(4),         AV(2),          NotImplementedError),
        (SV(4),         VV(2),          NotImplementedError),
        (SV(4),         RV(2),          TV(2)),
        (WV(4),         int(2),         WV(2)),
        (WV(4),         Decimal(2),     WV(2)),
        (WV(4),         SV(2),          NotImplementedError),
        (WV(4),         WV(2),          Decimal(2)),
        (WV(4),         TV(2),          NotImplementedError),
        (WV(4),         AV(2),          NotImplementedError),
        (WV(4),         VV(2),          NotImplementedError),
        (WV(4),         RV(2),          NotImplementedError),
        (TV(4),         int(2),         TV(2)),
        (TV(4),         Decimal(2),     TV(2)),
        (TV(4),         SV(2),          NotImplementedError),
        (TV(4),         WV(2),          NotImplementedError),
        (TV(4),         TV(2),          Decimal(2)),
        (TV(4),         AV(2),          NotImplementedError),
        (TV(4),         VV(2),          NotImplementedError),
        (TV(4),         RV(2),          NotImplementedError),
        (AV(4),         int(2),         AV(2)),
        (AV(4),         Decimal(2),     AV(2)),
        (AV(4),         SV(2),          SV(2)),
        (AV(4),         WV(2),          NotImplementedError),
        (AV(4),         TV(2),          NotImplementedError),
        (AV(4),         AV(2),          Decimal(2)),
        (AV(4),         VV(2),          NotImplementedError),
        (AV(4),         RV(2),          NotImplementedError),
        (VV(4),         int(2),         VV(2)),
        (VV(4),         Decimal(2),     VV(2)),
        (VV(4),         SV(2),          AV(2)),
        (VV(4),         WV(2),          NotImplementedError),
        (VV(4),         TV(2),          NotImplementedError),
        (VV(4),         AV(2),          SV(2)),
        (VV(4),         VV(2),          Decimal(2)),
        (VV(4),         RV(2),          NotImplementedError),
        (RV(4),         int(2),         RV(2)),
        (RV(4),         Decimal(2),     RV(2)),
        (RV(4),         SV(2),          NotImplementedError),
        (RV(4),         WV(2),          NotImplementedError),
        (RV(4),         TV(2),          NotImplementedError),
        (RV(4),         AV(2),          NotImplementedError),
        (RV(4),         VV(2),          NotImplementedError),
        (RV(4),         RV(2),          Decimal(2)),
    ],
    ids=idfn
)
def test_truediv(a: Any, b: Any, expected: UnitType | type[NotImplementedError]) -> None:
    with expect_raise(expected):
        result = a / b
        assert type(result) is type(expected)
        assert result == expected

# a // b = ?
@pytest.mark.parametrize(
    ("a", "b", "expected"),
    [
        (int(4),        int(2),         int(2)),
        (int(4),        Decimal(2),     Decimal(2)),
        (int(4),        SV(2),          NotImplementedError),
        (int(4),        WV(2),          NotImplementedError),
        (int(4),        TV(2),          NotImplementedError),
        (int(4),        AV(2),          NotImplementedError),
        (int(4),        VV(2),          NotImplementedError),
        (int(4),        RV(2),          NotImplementedError),
        (Decimal(4),    int(2),         Decimal(2)),
        (Decimal(4),    Decimal(2),     Decimal(2)),
        (Decimal(4),    SV(2),          NotImplementedError),
        (Decimal(4),    WV(2),          NotImplementedError),
        (Decimal(4),    TV(2),          NotImplementedError),
        (Decimal(4),    AV(2),          NotImplementedError),
        (Decimal(4),    VV(2),          NotImplementedError),
        (Decimal(4),    RV(2),          NotImplementedError),
        (SV(4),         int(2),         NotImplementedError),
        (SV(4),         Decimal(2),     NotImplementedError),
        (SV(4),         SV(2),          Decimal(2)),
        (SV(4),         WV(2),          NotImplementedError),
        (SV(4),         TV(2),          NotImplementedError),
        (SV(4),         AV(2),          NotImplementedError),
        (SV(4),         VV(2),          NotImplementedError),
        (SV(4),         RV(2),          NotImplementedError),
        (WV(4),         int(2),         NotImplementedError),
        (WV(4),         Decimal(2),     NotImplementedError),
        (WV(4),         SV(2),          NotImplementedError),
        (WV(4),         WV(2),          Decimal(2)),
        (WV(4),         TV(2),          NotImplementedError),
        (WV(4),         AV(2),          NotImplementedError),
        (WV(4),         VV(2),          NotImplementedError),
        (WV(4),         RV(2),          NotImplementedError),
        (TV(4),         int(2),         NotImplementedError),
        (TV(4),         Decimal(2),     NotImplementedError),
        (TV(4),         SV(2),          NotImplementedError),
        (TV(4),         WV(2),          NotImplementedError),
        (TV(4),         TV(2),          Decimal(2)),
        (TV(4),         AV(2),          NotImplementedError),
        (TV(4),         VV(2),          NotImplementedError),
        (TV(4),         RV(2),          NotImplementedError),
        (AV(4),         int(2),         NotImplementedError),
        (AV(4),         Decimal(2),     NotImplementedError),
        (AV(4),         SV(2),          NotImplementedError),
        (AV(4),         WV(2),          NotImplementedError),
        (AV(4),         TV(2),          NotImplementedError),
        (AV(4),         AV(2),          Decimal(2)),
        (AV(4),         VV(2),          NotImplementedError),
        (AV(4),         RV(2),          NotImplementedError),
        (VV(4),         int(2),         NotImplementedError),
        (VV(4),         Decimal(2),     NotImplementedError),
        (VV(4),         SV(2),          NotImplementedError),
        (VV(4),         WV(2),          NotImplementedError),
        (VV(4),         TV(2),          NotImplementedError),
        (VV(4),         AV(2),          NotImplementedError),
        (VV(4),         VV(2),          Decimal(2)),
        (VV(4),         RV(2),          NotImplementedError),
        (RV(4),         int(2),         NotImplementedError),
        (RV(4),         Decimal(2),     NotImplementedError),
        (RV(4),         SV(2),          NotImplementedError),
        (RV(4),         WV(2),          NotImplementedError),
        (RV(4),         TV(2),          NotImplementedError),
        (RV(4),         AV(2),          NotImplementedError),
        (RV(4),         VV(2),          NotImplementedError),
        (RV(4),         RV(2),          Decimal(2)),
    ],
    ids=idfn
)
def test_floordiv(a: Any, b: Any, expected: UnitType | type[NotImplementedError]) -> None:
    with expect_raise(expected):
        result = a // b
        assert type(result) is type(expected)
        assert result == expected

# a % b = ?
@pytest.mark.parametrize(
    ("a", "b", "expected"),
    [
        (int(4),        int(2),         int(0)),
        (int(4),        Decimal(2),     Decimal(0)),
        (int(4),        SV(2),          NotImplementedError),
        (int(4),        WV(2),          NotImplementedError),
        (int(4),        TV(2),          NotImplementedError),
        (int(4),        AV(2),          NotImplementedError),
        (int(4),        VV(2),          NotImplementedError),
        (int(4),        RV(2),          NotImplementedError),
        (Decimal(4),    int(2),         Decimal(0)),
        (Decimal(4),    Decimal(2),     Decimal(0)),
        (Decimal(4),    SV(2),          NotImplementedError),
        (Decimal(4),    WV(2),          NotImplementedError),
        (Decimal(4),    TV(2),          NotImplementedError),
        (Decimal(4),    AV(2),          NotImplementedError),
        (Decimal(4),    VV(2),          NotImplementedError),
        (Decimal(4),    RV(2),          NotImplementedError),
        (SV(4),         int(2),         NotImplementedError),
        (SV(4),         Decimal(2),     NotImplementedError),
        (SV(4),         SV(2),          SV(0)),
        (SV(4),         WV(2),          NotImplementedError),
        (SV(4),         TV(2),          NotImplementedError),
        (SV(4),         AV(2),          NotImplementedError),
        (SV(4),         VV(2),          NotImplementedError),
        (SV(4),         RV(2),          NotImplementedError),
        (WV(4),         int(2),         NotImplementedError),
        (WV(4),         Decimal(2),     NotImplementedError),
        (WV(4),         SV(2),          NotImplementedError),
        (WV(4),         WV(2),          WV(0)),
        (WV(4),         TV(2),          NotImplementedError),
        (WV(4),         AV(2),          NotImplementedError),
        (WV(4),         VV(2),          NotImplementedError),
        (WV(4),         RV(2),          NotImplementedError),
        (TV(4),         int(2),         NotImplementedError),
        (TV(4),         Decimal(2),     NotImplementedError),
        (TV(4),         SV(2),          NotImplementedError),
        (TV(4),         WV(2),          NotImplementedError),
        (TV(4),         TV(2),          TV(0)),
        (TV(4),         AV(2),          NotImplementedError),
        (TV(4),         VV(2),          NotImplementedError),
        (TV(4),         RV(2),          NotImplementedError),
        (AV(4),         int(2),         NotImplementedError),
        (AV(4),         Decimal(2),     NotImplementedError),
        (AV(4),         SV(2),          NotImplementedError),
        (AV(4),         WV(2),          NotImplementedError),
        (AV(4),         TV(2),          NotImplementedError),
        (AV(4),         AV(2),          AV(0)),
        (AV(4),         VV(2),          NotImplementedError),
        (AV(4),         RV(2),          NotImplementedError),
        (VV(4),         int(2),         NotImplementedError),
        (VV(4),         Decimal(2),     NotImplementedError),
        (VV(4),         SV(2),          NotImplementedError),
        (VV(4),         WV(2),          NotImplementedError),
        (VV(4),         TV(2),          NotImplementedError),
        (VV(4),         AV(2),          NotImplementedError),
        (VV(4),         VV(2),          VV(0)),
        (VV(4),         RV(2),          NotImplementedError),
        (RV(4),         int(2),         NotImplementedError),
        (RV(4),         Decimal(2),     NotImplementedError),
        (RV(4),         SV(2),          NotImplementedError),
        (RV(4),         WV(2),          NotImplementedError),
        (RV(4),         TV(2),          NotImplementedError),
        (RV(4),         AV(2),          NotImplementedError),
        (RV(4),         VV(2),          NotImplementedError),
        (RV(4),         RV(2),          RV(0)),
    ],
    ids=idfn
)
def test_mod(a: Any, b: Any, expected: UnitType | type[NotImplementedError]) -> None:
    with expect_raise(expected):
        result = a % b
        assert type(result) is type(expected)
        assert result == expected

# divmod(a, b) = ?
@pytest.mark.parametrize(
    ("a", "b", "expected"),
    [
        (int(4),        int(2),         (int(2), int(0))),
        (int(4),        Decimal(2),     (Decimal(2), Decimal(0))),
        (int(4),        SV(2),          NotImplementedError),
        (int(4),        WV(2),          NotImplementedError),
        (int(4),        TV(2),          NotImplementedError),
        (int(4),        AV(2),          NotImplementedError),
        (int(4),        VV(2),          NotImplementedError),
        (int(4),        RV(2),          NotImplementedError),
        (Decimal(4),    int(2),         Decimal(0)),
        (Decimal(4),    Decimal(2),     (Decimal(2), Decimal(0))),
        (Decimal(4),    SV(2),          NotImplementedError),
        (Decimal(4),    WV(2),          NotImplementedError),
        (Decimal(4),    TV(2),          NotImplementedError),
        (Decimal(4),    AV(2),          NotImplementedError),
        (Decimal(4),    VV(2),          NotImplementedError),
        (Decimal(4),    RV(2),          NotImplementedError),
        (SV(4),         int(2),         NotImplementedError),
        (SV(4),         Decimal(2),     NotImplementedError),
        (SV(4),         SV(2),          (Decimal(2), SV(0))),
        (SV(4),         WV(2),          NotImplementedError),
        (SV(4),         TV(2),          NotImplementedError),
        (SV(4),         AV(2),          NotImplementedError),
        (SV(4),         VV(2),          NotImplementedError),
        (SV(4),         RV(2),          NotImplementedError),
        (WV(4),         int(2),         NotImplementedError),
        (WV(4),         Decimal(2),     NotImplementedError),
        (WV(4),         SV(2),          NotImplementedError),
        (WV(4),         WV(2),          (Decimal(2), WV(0))),
        (WV(4),         TV(2),          NotImplementedError),
        (WV(4),         AV(2),          NotImplementedError),
        (WV(4),         VV(2),          NotImplementedError),
        (WV(4),         RV(2),          NotImplementedError),
        (TV(4),         int(2),         NotImplementedError),
        (TV(4),         Decimal(2),     NotImplementedError),
        (TV(4),         SV(2),          NotImplementedError),
        (TV(4),         WV(2),          NotImplementedError),
        (TV(4),         TV(2),          (Decimal(2), TV(0))),
        (TV(4),         AV(2),          NotImplementedError),
        (TV(4),         VV(2),          NotImplementedError),
        (TV(4),         RV(2),          NotImplementedError),
        (AV(4),         int(2),         NotImplementedError),
        (AV(4),         Decimal(2),     NotImplementedError),
        (AV(4),         SV(2),          NotImplementedError),
        (AV(4),         WV(2),          NotImplementedError),
        (AV(4),         TV(2),          NotImplementedError),
        (AV(4),         AV(2),          (Decimal(2), AV(0))),
        (AV(4),         VV(2),          NotImplementedError),
        (AV(4),         RV(2),          NotImplementedError),
        (VV(4),         int(2),         NotImplementedError),
        (VV(4),         Decimal(2),     NotImplementedError),
        (VV(4),         SV(2),          NotImplementedError),
        (VV(4),         WV(2),          NotImplementedError),
        (VV(4),         TV(2),          NotImplementedError),
        (VV(4),         AV(2),          NotImplementedError),
        (VV(4),         VV(2),          (Decimal(2), VV(0))),
        (VV(4),         RV(2),          NotImplementedError),
        (RV(4),         int(2),         NotImplementedError),
        (RV(4),         Decimal(2),     NotImplementedError),
        (RV(4),         SV(2),          NotImplementedError),
        (RV(4),         WV(2),          NotImplementedError),
        (RV(4),         TV(2),          NotImplementedError),
        (RV(4),         AV(2),          NotImplementedError),
        (RV(4),         VV(2),          NotImplementedError),
        (RV(4),         RV(2),          (Decimal(2), RV(0))),
    ],
    ids=idfn
)
def test_divmod(a: Any, b: Any, expected: tuple[UnitType, UnitType] | type[NotImplementedError]) -> None:
    with expect_raise(expected):
        result_a, result_b = divmod(a, b)
        if isinstance(expected, tuple):
            expected_a, expected_b = expected
            assert type(result_a) is type(expected_a)
            assert type(result_b) is type(expected_b)
            assert result_a == expected_a
            assert result_b == expected_b

# a ** b = ?
@pytest.mark.parametrize(
    ("a", "b", "expected"),
    [
        (int(4),        int(2),         int(16)),
        (int(4),        Decimal(2),     Decimal(16)),
        (int(4),        SV(2),          NotImplementedError),
        (int(4),        WV(2),          NotImplementedError),
        (int(4),        TV(2),          NotImplementedError),
        (int(4),        AV(2),          NotImplementedError),
        (int(4),        VV(2),          NotImplementedError),
        (int(4),        RV(2),          NotImplementedError),
        (Decimal(4),    int(1),         Decimal(4)),
        (Decimal(4),    int(2),         Decimal(16)),
        (Decimal(4),    Decimal(1),     Decimal(4)),
        (Decimal(4),    Decimal(2),     Decimal(16)),
        (Decimal(4),    SV(2),          NotImplementedError),
        (Decimal(4),    WV(2),          NotImplementedError),
        (Decimal(4),    TV(2),          NotImplementedError),
        (Decimal(4),    AV(2),          NotImplementedError),
        (Decimal(4),    VV(2),          NotImplementedError),
        (Decimal(4),    RV(2),          NotImplementedError),
        (SV(4),         int(0),         Decimal(1)),
        (SV(4),         int(1),         SV(4)),
        (SV(4),         int(2),         AV(16)),
        (SV(4),         int(3),         VV(64)),
        (SV(4),         int(4),         NotImplementedError),
        (SV(4),         Decimal(0),     Decimal(1)),
        (SV(4),         Decimal(1),     SV(4)),
        (SV(4),         Decimal(2),     AV(16)),
        (SV(4),         Decimal(3),     VV(64)),
        (SV(4),         Decimal(4),     NotImplementedError),
        (SV(4),         SV(2),          NotImplementedError),
        (SV(4),         WV(2),          NotImplementedError),
        (SV(4),         TV(2),          NotImplementedError),
        (SV(4),         AV(2),          NotImplementedError),
        (SV(4),         VV(2),          NotImplementedError),
        (SV(4),         RV(2),          NotImplementedError),
        (WV(4),         int(0),         Decimal(1)),
        (WV(4),         int(1),         WV(4)),
        (WV(4),         int(2),         NotImplementedError),
        (WV(4),         Decimal(0),     Decimal(1)),
        (WV(4),         Decimal(1),     WV(4)),
        (WV(4),         Decimal(2),     NotImplementedError),
        (WV(4),         SV(2),          NotImplementedError),
        (WV(4),         WV(2),          NotImplementedError),
        (WV(4),         TV(2),          NotImplementedError),
        (WV(4),         AV(2),          NotImplementedError),
        (WV(4),         VV(2),          NotImplementedError),
        (WV(4),         RV(2),          NotImplementedError),
        (TV(4),         int(0),         Decimal(1)),
        (TV(4),         int(1),         TV(4)),
        (TV(4),         int(2),         NotImplementedError),
        (TV(4),         Decimal(0),     Decimal(1)),
        (TV(4),         Decimal(1),     TV(4)),
        (TV(4),         Decimal(2),     NotImplementedError),
        (TV(4),         SV(2),          NotImplementedError),
        (TV(4),         WV(2),          NotImplementedError),
        (TV(4),         TV(2),          NotImplementedError),
        (TV(4),         AV(2),          NotImplementedError),
        (TV(4),         VV(2),          NotImplementedError),
        (TV(4),         RV(2),          NotImplementedError),
        (AV(4),         int(0),         Decimal(1)),
        (AV(4),         int(1),         AV(4)),
        (AV(4),         int(2),         NotImplementedError),
        (AV(4),         Decimal(0),     Decimal(1)),
        (AV(4),         Decimal(1),     AV(4)),
        (AV(4),         Decimal(2),     NotImplementedError),
        (AV(4),         SV(2),          NotImplementedError),
        (AV(4),         WV(2),          NotImplementedError),
        (AV(4),         TV(2),          NotImplementedError),
        (AV(4),         AV(2),          NotImplementedError),
        (AV(4),         VV(2),          NotImplementedError),
        (AV(4),         RV(2),          NotImplementedError),
        (VV(4),         int(0),         Decimal(1)),
        (VV(4),         int(1),         VV(4)),
        (VV(4),         int(2),         NotImplementedError),
        (VV(4),         Decimal(0),     Decimal(1)),
        (VV(4),         Decimal(1),     VV(4)),
        (VV(4),         Decimal(2),     NotImplementedError),
        (VV(4),         SV(2),          NotImplementedError),
        (VV(4),         WV(2),          NotImplementedError),
        (VV(4),         TV(2),          NotImplementedError),
        (VV(4),         AV(2),          NotImplementedError),
        (VV(4),         VV(2),          NotImplementedError),
        (VV(4),         RV(2),          NotImplementedError),
        (RV(4),         int(0),         Decimal(1)),
        (RV(4),         int(1),         RV(4)),
        (RV(4),         int(2),         NotImplementedError),
        (RV(4),         Decimal(0),     Decimal(1)),
        (RV(4),         Decimal(1),     RV(4)),
        (RV(4),         Decimal(2),     NotImplementedError),
        (RV(4),         SV(2),          NotImplementedError),
        (RV(4),         WV(2),          NotImplementedError),
        (RV(4),         TV(2),          NotImplementedError),
        (RV(4),         AV(2),          NotImplementedError),
        (RV(4),         VV(2),          NotImplementedError),
        (RV(4),         RV(2),          NotImplementedError),
    ],
    ids=idfn
)
def test_pow(a: Any, b: Any, expected: UnitType | type[NotImplementedError]) -> None:
    with expect_raise(expected):
        result = a ** b
        assert type(result) is type(expected)
        assert result == expected
